/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package networkcapture.view;

import java.io.IOException;
import java.util.ArrayList;
import java.util.Vector;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.table.DefaultTableModel;
import jpcap.JpcapCaptor;
import jpcap.NetworkInterface;
import networkcapture.lib.PacketTableWriter;

/**
 *
 * @author Sandaruwan
 */
public class PacketTrafficAnalyser extends javax.swing.JInternalFrame {

    private DefaultTableModel dtm;
    private DefaultTableModel dtmCache;
    private final PacketTableWriter packetTableWriter;
    private boolean playTime = true;
    Vector vcols;

    /**
     * Creates new form PacketTrafficAnalyser
     */
    public PacketTrafficAnalyser() {
        initComponents();
        dtm = (DefaultTableModel) tblPacketTr.getModel();
        vcols = new Vector();
        vcols.add("Count");
        vcols.add("Source IP");
        vcols.add("Destination IP");
        vcols.add("Source Data");
        vcols.add("Checksum");
        vcols.add("Protocol");
        vcols.add("Length");
        packetTableWriter = new PacketTableWriter(dtm, cmbMxCount);

        dtmCache = new DefaultTableModel();

    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        buttonGroup1 = new javax.swing.ButtonGroup();
        jTabbedPane1 = new javax.swing.JTabbedPane();
        jPanel2 = new javax.swing.JPanel();
        btnClear = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        tblPacketTr = new javax.swing.JTable();
        btnSaveToDB = new javax.swing.JButton();
        btnFinish = new javax.swing.JButton();
        jPanel1 = new javax.swing.JPanel();
        btnStart = new javax.swing.JButton();
        jLabel3 = new javax.swing.JLabel();
        cmbDevices = new javax.swing.JComboBox();
        btnGetDevices = new javax.swing.JButton();
        rdnCaptureTime = new javax.swing.JRadioButton();
        txtCaptureTime = new javax.swing.JTextField();
        rdnCaptureCount = new javax.swing.JRadioButton();
        txtCaptureCount = new javax.swing.JTextField();
        btnCancel = new javax.swing.JButton();
        btnSaveToFile = new javax.swing.JButton();
        jPanel3 = new javax.swing.JPanel();
        jPanel4 = new javax.swing.JPanel();
        btnFro = new javax.swing.JButton();
        txtSPort = new javax.swing.JTextField();
        cmbMxCount = new javax.swing.JComboBox();
        cmbToProtocols = new javax.swing.JComboBox();
        btnSPort = new javax.swing.JButton();
        btnTo = new javax.swing.JButton();
        btnDIPFilter = new javax.swing.JButton();
        btnFilter = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();
        btnDPort = new javax.swing.JButton();
        txtDPort = new javax.swing.JTextField();
        txtIP = new javax.swing.JTextField();
        jLabel2 = new javax.swing.JLabel();
        cmbFilterProtocol = new javax.swing.JComboBox();
        btnFilterIp = new javax.swing.JButton();
        txtDIPFilter = new javax.swing.JTextField();
        rdnSrcIP = new javax.swing.JRadioButton();
        rdnSrcPort = new javax.swing.JRadioButton();
        rdnDstIP = new javax.swing.JRadioButton();
        rdnDstPort = new javax.swing.JRadioButton();
        jScrollPane2 = new javax.swing.JScrollPane();
        jTable1 = new javax.swing.JTable();

        setClosable(true);
        setIconifiable(true);
        setMaximizable(true);
        setResizable(true);
        setTitle("Packet Traffic Analyser");

        btnClear.setText("CLEAR");
        btnClear.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnClearActionPerformed(evt);
            }
        });

        tblPacketTr.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Count", "Source IP", "Destination IP", "Source Port", "Destination Port", "Protocol", "Length"
            }
        ));
        tblPacketTr.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                tblPacketTrMouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(tblPacketTr);

        btnSaveToDB.setText("SAVE TO DB");

        btnFinish.setText("FINISH");

        jPanel1.setBorder(javax.swing.BorderFactory.createTitledBorder("Filter"));

        btnStart.setText("START");
        btnStart.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnStartActionPerformed(evt);
            }
        });

        jLabel3.setText("Devices");

        btnGetDevices.setText("Refresh Devices");
        btnGetDevices.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnGetDevicesActionPerformed(evt);
            }
        });

        buttonGroup1.add(rdnCaptureTime);
        rdnCaptureTime.setText("Capture Time(S)");

        buttonGroup1.add(rdnCaptureCount);
        rdnCaptureCount.setText("Capture Count");

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(jLabel3)
                        .addGap(6, 6, 6)
                        .addComponent(cmbDevices, javax.swing.GroupLayout.PREFERRED_SIZE, 359, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(btnGetDevices)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 108, Short.MAX_VALUE)
                        .addComponent(btnStart, javax.swing.GroupLayout.PREFERRED_SIZE, 67, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(rdnCaptureTime)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(txtCaptureTime, javax.swing.GroupLayout.PREFERRED_SIZE, 78, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(rdnCaptureCount)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(txtCaptureCount, javax.swing.GroupLayout.PREFERRED_SIZE, 73, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap())
        );

        jPanel1Layout.linkSize(javax.swing.SwingConstants.HORIZONTAL, new java.awt.Component[] {txtCaptureCount, txtCaptureTime});

        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel3)
                    .addComponent(cmbDevices, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnStart)
                    .addComponent(btnGetDevices))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(rdnCaptureTime)
                    .addComponent(txtCaptureTime, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(rdnCaptureCount)
                    .addComponent(txtCaptureCount, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(0, 0, Short.MAX_VALUE))
        );

        btnCancel.setText("CANCEL");

        btnSaveToFile.setText("SAVE TO FILE");

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(btnFinish)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(btnSaveToFile)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(btnSaveToDB)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(btnClear)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(btnCancel)
                .addContainerGap())
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addComponent(jScrollPane1)
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 279, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnCancel)
                    .addComponent(btnFinish)
                    .addComponent(btnSaveToFile)
                    .addComponent(btnSaveToDB)
                    .addComponent(btnClear))
                .addContainerGap())
        );

        jTabbedPane1.addTab("Capture", jPanel2);

        jPanel4.setBorder(javax.swing.BorderFactory.createTitledBorder("Filter"));

        btnFro.setText("<<");
        btnFro.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnFroActionPerformed(evt);
            }
        });

        cmbMxCount.setEditable(true);
        cmbMxCount.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "2000", "50", "100", "200", "500" }));

        cmbToProtocols.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "UDP", "TCP", "ICMP", "ARP", "HTTP", "HTTPS", "SMTP", "FTP", "SSH" }));
        cmbToProtocols.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmbToProtocolsActionPerformed(evt);
            }
        });

        btnSPort.setText("FILTER");
        btnSPort.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSPortActionPerformed(evt);
            }
        });

        btnTo.setText(">>");
        btnTo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnToActionPerformed(evt);
            }
        });

        btnDIPFilter.setText("FILTER");
        btnDIPFilter.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnDIPFilterActionPerformed(evt);
            }
        });

        btnFilter.setText("FILTER");
        btnFilter.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnFilterActionPerformed(evt);
            }
        });

        jLabel1.setText("Filter");

        btnDPort.setText("FILTER");
        btnDPort.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnDPortActionPerformed(evt);
            }
        });

        jLabel2.setText("Max Count");

        cmbFilterProtocol.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "All" }));
        cmbFilterProtocol.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                cmbFilterProtocolItemStateChanged(evt);
            }
        });

        btnFilterIp.setText("FILTER");
        btnFilterIp.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnFilterIpActionPerformed(evt);
            }
        });

        rdnSrcIP.setText("SRC IP");

        rdnSrcPort.setText("SRC PORT");

        rdnDstIP.setText("DST IP");

        rdnDstPort.setText("DST PORT");

        javax.swing.GroupLayout jPanel4Layout = new javax.swing.GroupLayout(jPanel4);
        jPanel4.setLayout(jPanel4Layout);
        jPanel4Layout.setHorizontalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel1)
                    .addComponent(rdnSrcIP)
                    .addComponent(rdnSrcPort))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(jPanel4Layout.createSequentialGroup()
                        .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel4Layout.createSequentialGroup()
                                .addComponent(txtSPort, javax.swing.GroupLayout.PREFERRED_SIZE, 177, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(btnSPort)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(rdnDstPort))
                            .addGroup(jPanel4Layout.createSequentialGroup()
                                .addComponent(txtIP, javax.swing.GroupLayout.PREFERRED_SIZE, 177, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(btnFilterIp)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(rdnDstIP)))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(txtDIPFilter)
                            .addComponent(txtDPort)))
                    .addGroup(jPanel4Layout.createSequentialGroup()
                        .addComponent(cmbToProtocols, javax.swing.GroupLayout.PREFERRED_SIZE, 110, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(10, 10, 10)
                        .addComponent(btnTo)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(btnFro)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(cmbFilterProtocol, javax.swing.GroupLayout.PREFERRED_SIZE, 103, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(22, 22, 22)
                        .addComponent(jLabel2)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(cmbMxCount, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(18, 24, Short.MAX_VALUE)
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(btnFilter, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(btnDIPFilter, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(btnDPort, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );

        jPanel4Layout.linkSize(javax.swing.SwingConstants.HORIZONTAL, new java.awt.Component[] {cmbFilterProtocol, cmbToProtocols});

        jPanel4Layout.setVerticalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(cmbToProtocols, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(jLabel1))
                    .addComponent(btnFilter)
                    .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(btnFro)
                        .addComponent(btnTo)
                        .addComponent(cmbFilterProtocol, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(jLabel2)
                        .addComponent(cmbMxCount, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(txtIP, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(btnFilterIp)
                        .addComponent(txtDIPFilter, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(btnDIPFilter)
                        .addComponent(rdnSrcIP))
                    .addComponent(rdnDstIP, javax.swing.GroupLayout.Alignment.TRAILING))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(txtSPort, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnSPort)
                    .addComponent(txtDPort, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnDPort)
                    .addComponent(rdnSrcPort)
                    .addComponent(rdnDstPort))
                .addGap(0, 0, Short.MAX_VALUE))
        );

        jTable1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Count", "Source IP", "Destination IP", "Source Port", "Destination Port", "Protocol", "Length"
            }
        ));
        jScrollPane2.setViewportView(jTable1);

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane2)
            .addComponent(jPanel4, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addComponent(jPanel4, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 283, Short.MAX_VALUE)
                .addContainerGap())
        );

        jTabbedPane1.addTab("Filter", jPanel3);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jTabbedPane1)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jTabbedPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 432, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void cmbToProtocolsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmbToProtocolsActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_cmbToProtocolsActionPerformed

    private void btnToActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnToActionPerformed
        try {
            int index = cmbToProtocols.getSelectedIndex();
            if (index != -1 && index <= cmbToProtocols.getItemCount()) {
                cmbFilterProtocol.addItem(cmbToProtocols.getSelectedItem());

                System.out.println("CMB " + index);
                cmbToProtocols.removeItemAt(index);
            }
        } catch (Exception e) {
            System.out.println("Error: " + e.getMessage());
        }
    }//GEN-LAST:event_btnToActionPerformed

    private void btnFroActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnFroActionPerformed
        cmbFilterProtocol.validate();
        try {

            int index = cmbFilterProtocol.getSelectedIndex();
            if (index != -1 && index <= cmbFilterProtocol.getItemCount()) {
                cmbToProtocols.addItem(cmbFilterProtocol.getSelectedItem());
                System.out.println("CMB " + index);
                cmbFilterProtocol.removeItemAt(index);
            }
        } catch (Exception e) {
            System.out.println("Error: " + e.getMessage());
        }
    }//GEN-LAST:event_btnFroActionPerformed

    private void cmbFilterProtocolItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_cmbFilterProtocolItemStateChanged
        // dtm.
    }//GEN-LAST:event_cmbFilterProtocolItemStateChanged

    private void btnStartActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnStartActionPerformed
        if (playTime) {

            try {
                NetworkInterface[] devices = JpcapCaptor.getDeviceList();
                if (cmbDevices.getSelectedIndex() == -1) {
                    return;
                }
                btnStart.setText("STOP");
                playTime = false;

                // for each network interface
                final JpcapCaptor captor = JpcapCaptor.openDevice(
                        devices[cmbDevices.getSelectedIndex()], 65535, false, 20);
                // captor.setFilter("tcp", true);

                if (rdnCaptureCount.isSelected()) {
                    final int count = Integer.parseInt(txtCaptureCount.getText());
                    new Thread(new Runnable() {

                        @Override
                        public void run() {
                            int cic = 0;
                            while (cic < count) {
                                captor.loopPacket(1, packetTableWriter);
                                cic++;
                            }
                            playTime = true;
                            btnStart.setText("START");
                            captor.close();
                        }
                    }).start();

                } else if (rdnCaptureTime.isSelected()) {

                    final int cTime = Integer.parseInt(txtCaptureTime.getText());

                    new Thread(new Runnable() {

                        @Override
                        public void run() {

                            Long stopTime = System.currentTimeMillis() + cTime * 1000;
                            while (System.currentTimeMillis() <= stopTime) {
                                captor.loopPacket(1, packetTableWriter);
                            }
                            playTime = true;
                            btnStart.setText("START");
                            captor.close();
                        }
                    }).start();

                } else {
                    new Thread(new Runnable() {

                        @Override
                        public void run() {

                            while (!playTime) {
                                captor.loopPacket(1, packetTableWriter);
                            }
                            captor.close();
                        }
                    }).start();
                }
            } catch (IOException ex) {
                Logger.getLogger(networkcapture.MainFrame.class.getName()).log(Level.SEVERE, null, ex);
            }

        } else if (!playTime) {
            btnStart.setText("START");
            playTime = true;

            Vector data = new Vector<Object>(dtm.getDataVector());
            dtmCache = new DefaultTableModel(data, vcols);
        }
    }//GEN-LAST:event_btnStartActionPerformed

    private void btnFilterActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnFilterActionPerformed
        if (cmbToProtocols.getSelectedIndex() != -1
                && cmbFilterProtocol.getSelectedItem() != null && ((String) cmbFilterProtocol.getSelectedItem()).equals("All")) {
            dtm.setRowCount(0);
            for (int i = 0; i < dtmCache.getRowCount(); i++) {
                System.out.println("boolean ok " + dtmCache.getValueAt(i, 4));
                dtm.addRow(new Object[]{dtmCache.getValueAt(i, 0), dtmCache.getValueAt(i, 1),
                    dtmCache.getValueAt(i, 2), dtmCache.getValueAt(i, 3), dtmCache.getValueAt(i, 4),
                    dtmCache.getValueAt(i, 5), dtmCache.getValueAt(i, 6)
                });
            }
            return;
        }

        ArrayList ar = new ArrayList();

        for (int i = 0; i < cmbFilterProtocol.getItemCount(); i++) {
            ar.add(cmbFilterProtocol.getItemAt(i));
        }

        dtm.setRowCount(0);

        //System.out.println("***************************************** row count " + dtmCache.getRowCount());

        for (int i = 0; i < dtmCache.getRowCount(); i++) {
            String valueAt = (String) dtmCache.getValueAt(i, 5);
            for (int j = 0; j < ar.size(); j++) {
                //  System.out.println("DTM CACHE "+dtmCache.getValueAt(i, 4));

                //     System.out.println("--value " + valueAt.toLowerCase() + "  " + ((String) ar.get(j)).toLowerCase());
                if (valueAt.toLowerCase().equals(((String) ar.get(j)).toLowerCase())) {

          //          System.out.println("boolean ok " + dtmCache.getValueAt(i, 4));
                    dtm.addRow(new Object[]{dtmCache.getValueAt(i, 0), dtmCache.getValueAt(i, 1),
                        dtmCache.getValueAt(i, 2), dtmCache.getValueAt(i, 3), dtmCache.getValueAt(i, 4),
                        dtmCache.getValueAt(i, 5), dtmCache.getValueAt(i, 6)
                    });
                }
            }
        }

        System.out.println("dtm cache " + dtm.getRowCount());

        ///////////////////////////////////////////////////////////
        /**
         *
         */
        String ipAdd = txtIP.getText();

        dtm.setRowCount(0);

        System.out.println("***************************************** IPAADD " + ipAdd);

        for (int i = 0; i < dtmCache.getRowCount(); i++) {
            System.out.println("***************************************** value " + dtmCache.getValueAt(i, 1));
            if (ipAdd.toLowerCase().equals(((String) dtmCache.getValueAt(i, 1)).toLowerCase())) {
                System.out.println("boolean ok " + dtmCache.getValueAt(i, 5));
                dtm.addRow(new Object[]{dtmCache.getValueAt(i, 0), dtmCache.getValueAt(i, 1),
                    dtmCache.getValueAt(i, 2), dtmCache.getValueAt(i, 3), dtmCache.getValueAt(i, 4),
                    dtmCache.getValueAt(i, 5), dtmCache.getValueAt(i, 6)
                });
            }

        }

        System.out.println("dtm cache " + dtm.getRowCount());

//        
//        tblPacketTr.setModel(dtmCache);
//        tblPacketTr.repaint();

    }//GEN-LAST:event_btnFilterActionPerformed

    private void btnGetDevicesActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnGetDevicesActionPerformed
        NetworkInterface[] devices = JpcapCaptor.getDeviceList();
        cmbDevices.removeAllItems();
        for (int i = 0; i < devices.length; i++) {
            cmbDevices.addItem((i + 1) + ": " + devices[i].name + "(" + devices[i].description + ")");
        }
    }//GEN-LAST:event_btnGetDevicesActionPerformed

    private void btnFilterIpActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnFilterIpActionPerformed


    }//GEN-LAST:event_btnFilterIpActionPerformed

    private void tblPacketTrMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tblPacketTrMouseClicked
        int selectedRow = tblPacketTr.getSelectedRow();

        if (selectedRow != -1) {
            txtIP.setText((String) dtm.getValueAt(selectedRow, 1));
            txtDIPFilter.setText((String) dtm.getValueAt(selectedRow, 2));
            txtSPort.setText((String) dtm.getValueAt(selectedRow, 3));
            txtDPort.setText((String) dtm.getValueAt(selectedRow, 4));
        }
    }//GEN-LAST:event_tblPacketTrMouseClicked

    private void btnClearActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnClearActionPerformed
        dtm.setRowCount(0);

    }//GEN-LAST:event_btnClearActionPerformed

    private void btnSPortActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSPortActionPerformed

        String ipAdd = txtSPort.getText();
        dtm.setRowCount(0);

        //System.out.println("***************************************** IPAADD " + ipAdd);
        for (int i = 0; i < dtmCache.getRowCount(); i++) {
            //System.out.println("***************************************** value " + dtmCache.getValueAt(i, 3));
            if (ipAdd.toLowerCase().equals(((String) dtmCache.getValueAt(i, 3)).toLowerCase())) {
                System.out.println("boolean ok " + dtmCache.getValueAt(i, 5));
                dtm.addRow(new Object[]{dtmCache.getValueAt(i, 0), dtmCache.getValueAt(i, 1),
                    dtmCache.getValueAt(i, 2), dtmCache.getValueAt(i, 3), dtmCache.getValueAt(i, 4),
                    dtmCache.getValueAt(i, 5)
                });
            }

        }

        System.out.println("dtm cache " + dtm.getRowCount());
    }//GEN-LAST:event_btnSPortActionPerformed

    private void btnDIPFilterActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnDIPFilterActionPerformed

        String ipAdd = txtDIPFilter.getText();
        dtm.setRowCount(0);

        //   System.out.println("***************************************** IPAADD " + ipAdd);
        for (int i = 0; i < dtmCache.getRowCount(); i++) {
            // System.out.println("***************************************** value " + dtmCache.getValueAt(i, 2));
            if (ipAdd.toLowerCase().equals(((String) dtmCache.getValueAt(i, 2)).toLowerCase())) {
                //       System.out.println("boolean ok " + dtmCache.getValueAt(i, 5));
                dtm.addRow(new Object[]{dtmCache.getValueAt(i, 0), dtmCache.getValueAt(i, 1),
                    dtmCache.getValueAt(i, 2), dtmCache.getValueAt(i, 3), dtmCache.getValueAt(i, 4),
                    dtmCache.getValueAt(i, 5), dtmCache.getValueAt(i, 6)
                });
            }

        }

        // System.out.println("dtm cache " + dtm.getRowCount());
    }//GEN-LAST:event_btnDIPFilterActionPerformed

    private void btnDPortActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnDPortActionPerformed
        String ipAdd = txtDPort.getText();
        dtm.setRowCount(0);

        //System.out.println("***************************************** IPAADD " + ipAdd);
        for (int i = 0; i < dtmCache.getRowCount(); i++) {
            //System.out.println("***************************************** value " + dtmCache.getValueAt(i, 3));
            if (ipAdd.toLowerCase().equals(((String) dtmCache.getValueAt(i, 4)).toLowerCase())) {
                //  System.out.println("boolean ok " + dtmCache.getValueAt(i, 5));
                dtm.addRow(new Object[]{dtmCache.getValueAt(i, 0), dtmCache.getValueAt(i, 1),
                    dtmCache.getValueAt(i, 2), dtmCache.getValueAt(i, 3), dtmCache.getValueAt(i, 4),
                    dtmCache.getValueAt(i, 5), dtmCache.getValueAt(i, 6)
                });
            }

        }
    }//GEN-LAST:event_btnDPortActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnCancel;
    private javax.swing.JButton btnClear;
    private javax.swing.JButton btnDIPFilter;
    private javax.swing.JButton btnDPort;
    private javax.swing.JButton btnFilter;
    private javax.swing.JButton btnFilterIp;
    private javax.swing.JButton btnFinish;
    private javax.swing.JButton btnFro;
    private javax.swing.JButton btnGetDevices;
    private javax.swing.JButton btnSPort;
    private javax.swing.JButton btnSaveToDB;
    private javax.swing.JButton btnSaveToFile;
    private javax.swing.JButton btnStart;
    private javax.swing.JButton btnTo;
    private javax.swing.ButtonGroup buttonGroup1;
    private javax.swing.JComboBox cmbDevices;
    private javax.swing.JComboBox cmbFilterProtocol;
    private javax.swing.JComboBox cmbMxCount;
    private javax.swing.JComboBox cmbToProtocols;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JTabbedPane jTabbedPane1;
    private javax.swing.JTable jTable1;
    private javax.swing.JRadioButton rdnCaptureCount;
    private javax.swing.JRadioButton rdnCaptureTime;
    private javax.swing.JRadioButton rdnDstIP;
    private javax.swing.JRadioButton rdnDstPort;
    private javax.swing.JRadioButton rdnSrcIP;
    private javax.swing.JRadioButton rdnSrcPort;
    private javax.swing.JTable tblPacketTr;
    private javax.swing.JTextField txtCaptureCount;
    private javax.swing.JTextField txtCaptureTime;
    private javax.swing.JTextField txtDIPFilter;
    private javax.swing.JTextField txtDPort;
    private javax.swing.JTextField txtIP;
    private javax.swing.JTextField txtSPort;
    // End of variables declaration//GEN-END:variables
}
